name: Deploy ContactPlus to Mac

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test-and-deploy:
    runs-on: self-hosted
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Stop existing ContactPlus services
      run: |
        echo "🛑 Stopping existing ContactPlus services..."
        docker-compose down --remove-orphans || true
        
        # Clean up any orphaned containers
        docker ps -q --filter "name=contactplus" | xargs docker stop || true
        docker ps -aq --filter "name=contactplus" | xargs docker rm || true
        
        # Wait for cleanup
        sleep 5
        
    - name: Backup existing data
      run: |
        echo "💾 Creating backup of existing data..."
        BACKUP_DIR="$HOME/ContactPlus_Backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        
        # Backup Docker volumes if they exist
        if docker volume ls | grep -q contactplus_contact_data; then
          echo "Backing up contact data..."
          docker run --rm -v contactplus_contact_data:/data -v "$BACKUP_DIR:/backup" alpine \
            tar czf /backup/contact_data.tar.gz -C /data .
        fi
        
        if docker volume ls | grep -q contactplus_contact_logs; then
          echo "Backing up logs..."
          docker run --rm -v contactplus_contact_logs:/data -v "$BACKUP_DIR:/backup" alpine \
            tar czf /backup/contact_logs.tar.gz -C /data .
        fi
        
        echo "✅ Backup completed to: $BACKUP_DIR"
        echo "BACKUP_PATH=$BACKUP_DIR" >> $GITHUB_ENV
        
    - name: Build Docker images
      run: |
        echo "🔨 Building ContactPlus Docker images..."
        docker-compose build --parallel --no-cache
        
    - name: Run integration tests
      if: github.event.inputs.force_deploy != 'true'
      run: |
        echo "🧪 Running integration tests..."
        
        # Start services for testing
        docker-compose up -d
        
        # Wait for services
        echo "⏳ Waiting for services to be ready..."
        for i in {1..30}; do
          if curl -f -s http://localhost:8080/api/v1/health > /dev/null 2>&1; then
            echo "✅ Services are ready!"
            break
          fi
          if [[ $i -eq 30 ]]; then
            echo "❌ Services failed to start within timeout"
            docker-compose logs
            exit 1
          fi
          echo "Waiting... (attempt $i/30)"
          sleep 10
        done
        
        # Run quick validation tests
        cd tests
        python integration_test_suite.py --timeout 180 || {
          echo "❌ Integration tests failed"
          cd ..
          docker-compose logs
          exit 1
        }
        
        # Stop test services
        cd ..
        docker-compose down
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying ContactPlus to production..."
        
        # Start production services
        docker-compose up -d
        
        # Wait for production services to be ready
        echo "⏳ Waiting for production services..."
        for i in {1..20}; do
          if curl -f -s http://localhost:8080/api/v1/health > /dev/null 2>&1; then
            echo "✅ Production services are ready!"
            break
          fi
          if [[ $i -eq 20 ]]; then
            echo "❌ Production deployment failed"
            docker-compose logs
            exit 1
          fi
          echo "Waiting... (attempt $i/20)"
          sleep 10
        done
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check all services
        services=(
          "http://localhost:8080/api/v1/health"
          "http://localhost:3000"
          "http://localhost:9090"
          "http://localhost:8081"
        )
        
        for service in "${services[@]}"; do
          if curl -f -s "$service" > /dev/null 2>&1; then
            echo "✅ $service is responding"
          else
            echo "❌ $service is not responding"
            exit 1
          fi
        done
        
        # Check database stats
        stats=$(curl -s http://localhost:8080/api/v1/stats)
        total_contacts=$(echo "$stats" | python -c "import json,sys; print(json.load(sys.stdin).get('total_contacts', 0))")
        
        echo "📊 Database contains $total_contacts contacts"
        
        if [[ $total_contacts -gt 0 ]]; then
          echo "✅ Database is populated"
        else
          echo "⚠️  Database appears empty - may need data import"
        fi
        
    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment validation..."
        
        # Quick smoke tests
        python comprehensive_api_test.py || {
          echo "⚠️  Some post-deployment tests failed, but deployment continues"
        }
        
    - name: Update deployment status
      run: |
        echo "📋 Deployment Summary"
        echo "===================="
        echo "✅ Deployment completed successfully"
        echo "📅 Deployed at: $(date)"
        echo "🔗 Web Interface: http://localhost:3000"
        echo "🔗 API Documentation: http://localhost:8080/docs"
        echo "🔗 System Monitor: http://localhost:9090"
        echo "🔗 Logs Viewer: http://localhost:8081"
        echo "💾 Backup Location: $BACKUP_PATH"
        
        # Save deployment info
        cat > deployment_info.json << EOF
        {
          "deployment_time": "$(date -Iseconds)",
          "git_commit": "$GITHUB_SHA",
          "backup_path": "$BACKUP_PATH",
          "services": {
            "web": "http://localhost:3000",
            "api": "http://localhost:8080",
            "monitor": "http://localhost:9090",
            "logs": "http://localhost:8081"
          }
        }
EOF
        
    - name: Cleanup old Docker resources
      run: |
        echo "🧹 Cleaning up old Docker resources..."
        
        # Remove old images (keep last 3 versions)
        docker images --format "table {{.Repository}}:{{.Tag}} {{.CreatedAt}}" | \
          grep contactplus | tail -n +4 | awk '{print $1}' | xargs docker rmi || true
        
        # Clean up build cache
        docker builder prune -f --filter until=24h || true
        
        echo "✅ Cleanup completed"
        
    - name: Send deployment notification
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "🎉 ContactPlus deployment to Mac completed successfully!"
          echo "🔗 Access your application at: http://localhost:3000"
        else
          echo "❌ ContactPlus deployment failed!"
          echo "📋 Check the logs above for details"
          echo "💾 Data backup available at: $BACKUP_PATH"
        fi